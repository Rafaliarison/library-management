openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22044 STD22037
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors
  - name: Borrowing
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter books with release dates after or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books with release dates before or equal to this date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  
  /books/borrowed:
    get:
      tags:
        - Borrowing
      summary: Get all borrowed books
      operationId: getBorrowedBooks
      responses:
        200:
          description: The list of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/available:
    get:
      tags:
        - Borrowing
      summary: Get all available books
      operationId: getAvailableBooks
      responses:
        200:
          description: The list of available books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  
  /borrow:
    post:
      tags:
        - Borrowing
      summary: Borrow a book
      operationId: borrowBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  description: The ID of the book to borrow
                visitorId:
                  type: string
                  description: The ID of the visitor that borrow the book
              required:
                - bookId
                - visitorId
      responses:
        200:
          description: Book borrowed successfully
          
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /return:
    post:
      tags:
        - Borrowing
      summary: return a borrowed book
      operationId: retrunBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  description: The ID of the book to return
                visitorId:
                  type: string
                  description: The ID of the visitor who return the book
              required:
                - bookId
                - visitorId
      responses:
        200:
          description: The book is returned successfully
  
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Get a list of all authors. You can filter by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: name
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors 
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
  /visitors:
    get:
      tags:
        - Visitors
      summary: Get all visitor
      operationId: getvisitor
      parameters:
        - in: query
          name: ID
          description: The returned of the visitors ID
          schema:
            type: integer
        - in: query
          name: name
          description: The return of the visitors name
          schema:
            type: string
        - in: query
          name: reference
          description: The return of the visitors reference
          schema:
            type: string
      responses:
        200:
          description: The list fo all visitor.
          
  /visitors/{visitorId}/borrowed-books:
    get:
      tags:
        - Visitors
      summary: Get books borrowed by a visitor
      operationId: getBorrowedBooksByVisitor
      parameters:
        - in: path
          name: visitorId
          description: The ID of the visitor
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of books borrowed by the visitor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  
  /visitors/{visitorId}/returned-books:
    get:
      tags:
        - Visitors
      summary: Get books returned by a visitor
      operationId: getReturnedBooksByVisitor
      parameters:
        - in: path
          name: visitorId
          description: The ID of the visitor
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of books returned by the visitor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /visitors/{visitorId}/activities:
    get:
      tags:
        - Visitors
      summary: Get visitor activities within a specified time range
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          description: The ID of the visitor
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date of the time range
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date of the time range
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: startTime
          description: Start time of the day
          required: false
          schema:
            type: string
            format: time
        - in: query
          name: endTime
          description: End time of the day
          required: false
          schema:
            type: string
            format: time
      responses:
        200:
          description: List of visitor activities within the specified time range
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    activityType:
                      type: string
                      description: Type of activity ('borrow' or 'return')
                    bookId:
                      type: string
                      description: ID of the book involved in the activity
                    activityDate:
                      type: string
                      format: date-time
                      description: Date and time of the activity

  /secure-endpoint:
    get:
      summary: Accessible only to authenticated users
      description: This endpoint requires authentication.
      operationId: secureEndpoint
      security:
        - oauth2:
            - read
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authenticated access successful"
    
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        emprunteur:
          type: object
          properties:
            visitorId:
              type: string
            borrowDate:
              type: string
              format: date
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference: 
          type: string
securitySchemes:
  oauth2:
    type: oauth2
    flows:
      authorizationCode:
        authorizationUrl: https://authorization-server.com/auth
        tokenUrl: https://authorization-server.com/token
        scopes:
          read: Grants read access
          write: Grants write access
