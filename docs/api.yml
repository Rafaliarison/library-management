openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22037
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: pageSize
          description: Number of items per page
          required: 
          schema:
            type: integer
            default: 50
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter books with release dates after or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books with release dates before or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
        # TODO3: add parameter to filter books by intervals of dates of the releaseDate
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    # TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Get a list of all authors. You can filter by name.
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
        - in: query
          name: name
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: path
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - in: path
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update the author of a specific book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: The ID of the new author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author of the book updated successfully
  /books/authors:
    put:
      summary: Update authors of multiple books
      operationId: updateMultipleBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Authors of the books updated successfully  
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/sex"
    sex:
      type: string
      enum:
        - M
        - F
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            author:
              type: string
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: The id of the book to update its authors
        authorId:
          type: string
          description: the id of the new author for the book
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1