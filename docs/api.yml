openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22044 STD22037
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter books with release dates after or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books with release dates before or equal to this date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /borrow:
    post:
      summary: Borrow a book
      operationId: borrowBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  description: The ID of the book to borrow
                visitorId:
                  type: string
                  description: The ID of the visitor that borrow the book
              required:
                - bookId
                - visitorId
      responses:
        200:
          description: Book borrowed successfully
          
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /return:
    post:
      summary: return a borrowed book
      operationId: retrunBook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  description: The ID of the book to return
                visitorId:
                  type: string
                  description: The ID of the visitor who return the book
              required:
                - bookId
                - visitorId
      responses:
        200:
          description: The book is returned successfully
  
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Get a list of all authors. You can filter by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: name
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors 
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
  /visitors:
    get:
      tags:
        - Visitors
      summary: Get all visitor
      operationId: getvisitor
      parameters:
        - in: query
          name: ID
          description: The returned of the visitors ID
          schema:
            type: integer
        - in: query
          name: name
          description: The return of the visitors name
          schema:
            type: string
        - in: query
          name: reference
          description: The return of the visitors reference
          schema:
            type: string
      responses:
        200:
          description: The list fo all visitor.
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference: 
          type: string
